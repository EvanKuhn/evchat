#!/usr/bin/env python

import curses
import curses.ascii
import os


def terminal_size():
    "Return the current terminal size, as a tuple of (rows, cols)"
    rows, cols = os.popen('stty size', 'r').read().split()
    return (int(rows), int(cols))


#==============================================================================
# ExitBox
#==============================================================================

class EditBox:
    def __init__(self, nlines, ncols, begin_y, begin_x):
        self.nlines  = nlines
        self.ncols   = ncols
        self.begin_y = begin_y
        self.begin_x = begin_x
        self.window  = curses.newwin(nlines, ncols, begin_y, begin_x)
        self.window.keypad(1)
        self.x = 0
        self.y = 0
        self.buffer = ''

    def refresh(self):
        self.window.refresh()
        return self

    def clear(self):
        self.x = 0
        self.y = 0
        self.buffer = ''
        self.window.clear()
        self.window.move(0, 0)
        return self

    def edit(self):
        self.clear()
        while True:
            c = self.window.getch()
            if curses.ascii.isprint(c):
                self.window.addch(c)
                self.buffer += chr(c)
            elif c == curses.ascii.NL:
                return self.buffer

    def getstr(self):
        return self.window.getstr()



#==============================================================================
# Main
#==============================================================================

try:
    # Start curses
    screen = curses.initscr()
    screen.keypad(1)
    curses.cbreak()
    curses.noecho()

    # Dimensions
    rows, cols = terminal_size()
    editbox_rows = 5
    history_rows = rows - editbox_rows

    # Create history window
    history = curses.newwin(history_rows, cols, 0, 0)
    history.border(0)

    # Create EditBox
    editbox = EditBox(editbox_rows, cols, history_rows, 0)

    while True:
        history.refresh()
        editbox.clear().refresh()
        str = editbox.edit()
        history.addstr(str)

except KeyboardInterrupt:
    pass

finally:
    # Shut down
    curses.echo()
    curses.nocbreak()
    screen.keypad(0)
    curses.endwin()
